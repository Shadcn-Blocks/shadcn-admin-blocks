{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "useDynamicSidebar",
  "type": "registry:hook",
  "files": [
    {
      "path": "registry/layout/hooks/useDynamicSidebar.ts",
      "content": "import { AnyRoute, useRouter } from '@tanstack/react-router'\nimport { Home } from 'lucide-react'\n\nexport type SidebarItem = {\n  url: string\n  icon: any\n  title: string\n  children: SidebarItem[]\n}\n\nconst buildSidebarItems = (allFlatRoutes: AnyRoute[]): SidebarItem[] => {\n  const items: SidebarItem[] = []\n\n  const parents = allFlatRoutes.filter((route) => {\n    if (!route.fullPath) return false\n\n    // remove initial \"/\" and trailing \"/\" if present\n    const cleanPath = route.fullPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n\n    const segments = cleanPath.split('/')\n    return segments.length === 1 && segments[0] !== ''\n  })\n\n  // root route\n  const rootRoute = allFlatRoutes.find(\n    (route) => route.fullPath === '/' && route.options?.staticData?.showInSidebar\n  )\n  if (rootRoute && rootRoute.options?.staticData) {\n    items.push({\n      url: '/',\n      icon: rootRoute.options.staticData.icon || Home,\n      title: rootRoute.options.staticData.title || 'Home',\n      children: [],\n    })\n  }\n\n  parents.forEach((parentRoute) => {\n    if (!parentRoute.options?.staticData?.showInSidebar) return\n\n    const parentPath = parentRoute.fullPath\n    const parentStaticData = parentRoute.options.staticData\n\n    const parentItem: SidebarItem = {\n      url: parentPath,\n      icon: parentStaticData.icon || Home,\n      title: parentStaticData.title || 'untitled',\n      children: [],\n    }\n\n    const childRoutes = allFlatRoutes.filter((route) => {\n      if (!route.fullPath || !route.options?.staticData?.showInSidebar) return false\n      if (route.fullPath === parentPath) return false // skip the parent itself\n      if (route.fullPath.includes('$')) return false // skip dynamic routes\n\n      // check if this route is a child of the current parent\n      const cleanPath = route.fullPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n      const segments = cleanPath.split('/')\n\n      // child routes should have more than 1 segment and start with the parent segment\n      return (\n        segments.length > 1 && segments[0] === parentPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n      )\n    })\n\n    childRoutes.forEach((childRoute) => {\n      if (childRoute.options?.staticData) {\n        parentItem.children.push({\n          url: childRoute.fullPath,\n          icon: childRoute.options.staticData.icon || Home,\n          title: childRoute.options.staticData.title || 'untitled',\n          children: [],\n        })\n      }\n    })\n\n    items.push(parentItem)\n  })\n\n  return items\n}\n\nexport const useDynamicSidebar = (): SidebarItem[] => {\n  const router = useRouter()\n  const allRoutes = router.flatRoutes\n\n  if (!allRoutes) {\n    return []\n  }\n\n  return buildSidebarItems(allRoutes)\n}\n",
      "type": "registry:ui"
    }
  ]
}
