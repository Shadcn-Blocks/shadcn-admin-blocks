{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Layout",
  "type": "registry:block",
  "title": "Layout",
  "description": "The whole layout.",
  "dependencies": [
    "react-i18next"
  ],
  "registryDependencies": [
    "avatar",
    "button",
    "separator",
    "sidebar",
    "breadcrumb",
    "collapsible",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "registry/layout/AppHeader.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport { Separator } from '@/components/ui/separator'\nimport { useSidebar } from '@/components/ui/sidebar'\nimport { SidebarIcon } from 'lucide-react'\nimport { Breadcrumbs } from './Breadcrumbs'\nimport { UserDropdown, type UserDropdownProps } from './UserDropdown'\n\nexport interface AppHeaderProps {\n  userDropdown?: UserDropdownProps\n}\n\nexport const AppHeader = ({ userDropdown }: AppHeaderProps) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <header className=\"bg-background sticky top-0 z-50 flex w-full items-center border-b\">\n      <div className=\"flex h-(--header-height) w-full items-center gap-2 px-4\">\n        <Button className=\"h-8 w-8\" variant=\"ghost\" size=\"icon\" onClick={toggleSidebar}>\n          <SidebarIcon />\n        </Button>\n        <Separator orientation=\"vertical\" className=\"mr-2 h-4\" />\n        <Breadcrumbs />\n\n        <div className=\"ml-auto\">\n          <UserDropdown {...userDropdown} />\n        </div>\n      </div>\n    </header>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/AppSidebar.tsx",
      "content": "import { ComponentProps } from 'react'\nimport { Sidebar, SidebarContent, SidebarHeader } from '@/components/ui/sidebar'\nimport { OrganizationSwitch } from './OrganizationSwitch'\nimport { SidebarMainNav } from './SidebarMainNav'\n\nexport const AppSidebar = (props: ComponentProps<typeof Sidebar>) => {\n  return (\n    <Sidebar className=\"h-[calc(100svh-var(--header-height))]!\" {...props}>\n      <SidebarHeader>\n        <OrganizationSwitch />\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarMainNav />\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/Breadcrumbs.tsx",
      "content": "import React, { useMemo } from 'react'\nimport { isMatch, Link, useMatches } from '@tanstack/react-router'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbList,\n  BreadcrumbSeparator,\n} from '@/components/ui/breadcrumb'\n\nexport const Breadcrumbs = () => {\n  const matches = useMatches()\n\n  const items = useMemo(() => {\n    const matchesWithCrumbs = matches.filter((match) => isMatch(match, 'loaderData.crumb'))\n\n    return matchesWithCrumbs.map(({ pathname, loaderData, staticData }) => ({\n      href: pathname,\n      label: loaderData?.crumb,\n      isClickable: staticData.hasClickableBreadcrumb,\n    }))\n  }, [matches])\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {items.map((item, index) => (\n          <React.Fragment key={index}>\n            <BreadcrumbItem key={index}>\n              {item.isClickable ? (\n                <Link to={item.href} className=\"breadcrumb-link\">\n                  {item.label}\n                </Link>\n              ) : (\n                <span className=\"breadcrumb-link\">{item.label}</span>\n              )}\n            </BreadcrumbItem>\n            {index < items.length - 1 && <BreadcrumbSeparator />}\n          </React.Fragment>\n        ))}\n      </BreadcrumbList>\n    </Breadcrumb>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/Layout.tsx",
      "content": "import { SidebarInset, SidebarProvider } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\nimport { AppHeader, type AppHeaderProps } from './AppHeader'\nimport { AppSidebar } from './AppSidebar'\n\ninterface RootLayoutProps {\n  appHeader?: AppHeaderProps\n}\n\nexport function Layout({ children, appHeader }: PropsWithChildren<RootLayoutProps>) {\n  return (\n    <>\n      <div className=\"[--header-height:calc(--spacing(14))]\">\n        <SidebarProvider className=\"flex flex-col\">\n          <div className=\"flex flex-1\">\n            <AppSidebar />\n            <SidebarInset>\n              <AppHeader {...appHeader} />\n              <div className=\"flex flex-1 flex-col gap-4 p-4\">{children}</div>\n            </SidebarInset>\n          </div>\n        </SidebarProvider>\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/OrganizationSwitch.tsx",
      "content": "import * as React from 'react'\nimport { ChevronsUpDown, Plus, Command } from 'lucide-react'\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuShortcut,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar'\n\nconst data = [\n  {\n    name: 'Acme Inc',\n    logo: Command,\n    plan: 'Enterprise',\n  },\n]\n\nexport const OrganizationSwitch = () => {\n  // const { t } = useTranslation()\n  // const { isMobile } = useSidebar()\n  const [activeTeam, setActiveTeam] = React.useState(data[0])\n\n  if (!activeTeam) {\n    return null\n  }\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <activeTeam.logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{activeTeam.name}</span>\n                <span className=\"truncate text-xs\">{activeTeam.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            align=\"start\"\n            // side={isMobile ? 'bottom' : 'right'}\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-muted-foreground text-xs\">\n              organizationSwitch.label\n            </DropdownMenuLabel>\n            {data.map((team, index) => (\n              <DropdownMenuItem\n                key={team.name}\n                onClick={() => setActiveTeam(team)}\n                className=\"gap-2 p-2\"\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-md border\">\n                  <team.logo className=\"size-3.5 shrink-0\" />\n                </div>\n                {team.name}\n                <DropdownMenuShortcut>âŒ˜{index + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-transparent\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"text-muted-foreground font-medium\">\n                organizationSwitch.addOrganization\n              </div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\nfunction useTranslation(): { t: any } {\n  throw new Error('Function not implemented.')\n}\n\nfunction useSidebar(): { isMobile: any } {\n  throw new Error('Function not implemented.')\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/SidebarMainNav.tsx",
      "content": "import { Link, useMatches } from '@tanstack/react-router'\nimport { ChevronRight } from 'lucide-react'\n\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from '@/components/ui/sidebar'\nimport { SidebarItem, useDynamicSidebar } from '@/hooks/useDynamicSidebar'\nimport { useMemo } from 'react'\nimport { TooltipContent } from '@/components/ui/tooltip'\n\nconst CollapsibleSidebarItem = ({ item }: { item: SidebarItem }) => {\n  const matches = useMatches()\n\n  const defaultOpen = useMemo(() => {\n    return matches.some((match) => match.pathname === item.url)\n  }, [matches, item.url])\n\n  return (\n    <Collapsible asChild className=\"group/collapsible\" defaultOpen={defaultOpen}>\n      <SidebarMenuItem>\n        <CollapsibleTrigger asChild>\n          <SidebarMenuButton\n            tooltip={item.title ? <TooltipContent>{item.title}</TooltipContent> : undefined}\n          >\n            {item.icon}\n            <span className=\"text-sm\">{item.title}</span>\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n          </SidebarMenuButton>\n        </CollapsibleTrigger>\n        <CollapsibleContent>\n          <SidebarMenuSub>\n            {item.children.map((child) => (\n              <Link to={child.url} key={child.url}>\n                {({ isActive }) => (\n                  <SidebarMenuSubItem>\n                    <SidebarMenuSubButton asChild isActive={isActive}>\n                      <span className=\"font-inherit\">{child.title}</span>\n                    </SidebarMenuSubButton>\n                  </SidebarMenuSubItem>\n                )}\n              </Link>\n            ))}\n          </SidebarMenuSub>\n        </CollapsibleContent>\n      </SidebarMenuItem>\n    </Collapsible>\n  )\n}\n\nconst SidebarItemComponent = ({ item }: { item: SidebarItem }) => {\n  if (item.children.length > 0) {\n    return <CollapsibleSidebarItem item={item} />\n  }\n\n  return (\n    <Link to={item.url} key={item.url}>\n      {({ isActive }) => (\n        <SidebarMenuItem key={item.key}>\n          <SidebarMenuButton asChild isActive={isActive}>\n            <span>\n              {item.icon}\n              <span>{item.title}</span>\n            </span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      )}\n    </Link>\n  )\n}\n\nexport const SidebarMainNav = () => {\n  const sidebarItems = useDynamicSidebar()\n\n  return (\n    <div className=\"p-2\">\n      <SidebarMenu>\n        {sidebarItems.map((item) => (\n          <SidebarItemComponent key={item.key} item={item} />\n        ))}\n      </SidebarMenu>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/UserDropdown.tsx",
      "content": "import { DropdownMenuGroup } from '@radix-ui/react-dropdown-menu'\nimport { LogOutIcon } from 'lucide-react'\nimport { ReactNode, useState } from 'react'\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { useTranslation } from '@/hooks/useTranslation'\n\nexport interface UserDropdownProps {\n  userName?: ReactNode\n  signOut?: () => Promise<void>\n}\nexport const UserDropdown = ({ userName, signOut }: UserDropdownProps) => {\n  const { t } = useTranslation()\n  const [open, setOpen] = useState(false)\n  const userAvatar = 'https://bundui-images.netlify.app/avatars/01.png'\n\n  return (\n    <DropdownMenu open={open} onOpenChange={setOpen}>\n      <DropdownMenuTrigger asChild>\n        <div className=\"flex items-center gap-2 px-2 py-1.5 cursor-pointer\">\n          <Avatar className=\"size-6 rounded-lg\">\n            <AvatarImage src={userAvatar} />\n            <AvatarFallback className=\"rounded-lg\">{userName}</AvatarFallback>\n          </Avatar>\n          {/* TODO: this removal is inspired by OpenAI platform */}\n          {/* <div className=\"truncate\">{userName}</div> */}\n          {/* <ChevronDown className=\"size-4\" /> */}\n        </div>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n        sideOffset={4}\n      >\n        <DropdownMenuLabel className=\"p-0 font-normal\">\n          <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n            <Avatar className=\"size-8 rounded-lg\">\n              <AvatarImage src={userAvatar} />\n              <AvatarFallback className=\"rounded-lg\">{userName}</AvatarFallback>\n            </Avatar>\n            <div className=\"grid flex-1 text-left text-sm leading-tight\">\n              <span className=\"truncate font-semibold\">{userName}</span>\n            </div>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem className=\"text-red-600!\" onClick={signOut} disabled={!signOut}>\n            <LogOutIcon className=\"text-red-600!\" />\n            {t('sideBar.userNav.logout')}\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/hooks/useDynamicSidebar.ts",
      "content": "import { type AnyRoute, useRouter } from '@tanstack/react-router'\nimport { Home } from 'lucide-react'\nimport { ReactNode } from 'react'\n\nexport type SidebarItem = {\n  key: string\n  url: string\n  icon: ReactNode\n  title: ReactNode\n  children: SidebarItem[]\n}\n\nconst buildSidebarItems = (allFlatRoutes: AnyRoute[]): SidebarItem[] => {\n  const items: SidebarItem[] = []\n\n  const parents = allFlatRoutes.filter((route) => {\n    if (!route.fullPath) return false\n\n    // remove initial \"/\" and trailing \"/\" if present\n    const cleanPath = route.fullPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n\n    const segments = cleanPath.split('/')\n    return segments.length === 1 && segments[0] !== ''\n  })\n\n  // root route\n  const rootRoute = allFlatRoutes.find(\n    (route) => route.fullPath === '/' && route.options?.staticData?.showInSidebar\n  )\n  if (rootRoute && rootRoute.options?.staticData) {\n    items.push({\n      key: 'root',\n      url: '/',\n      icon: rootRoute.options.staticData.icon || Home,\n      title: rootRoute.options.staticData.title || 'Home',\n      children: [],\n    })\n  }\n\n  parents.forEach((parentRoute) => {\n    if (!parentRoute.options?.staticData?.showInSidebar) return\n\n    const parentPath = parentRoute.fullPath\n    const parentStaticData = parentRoute.options.staticData\n\n    const parentItem: SidebarItem = {\n      key: parentPath,\n      url: parentPath,\n      icon: parentStaticData.icon || Home,\n      title: parentStaticData.title || 'untitled',\n      children: [],\n    }\n\n    const childRoutes = allFlatRoutes.filter((route) => {\n      if (!route.fullPath || !route.options?.staticData?.showInSidebar) return false\n      if (route.fullPath === parentPath) return false // skip the parent itself\n      if (route.fullPath.includes('$')) return false // skip dynamic routes\n\n      // check if this route is a child of the current parent\n      const cleanPath = route.fullPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n      const segments = cleanPath.split('/')\n\n      // child routes should have more than 1 segment and start with the parent segment\n      return (\n        segments.length > 1 && segments[0] === parentPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n      )\n    })\n\n    childRoutes.forEach((childRoute) => {\n      if (childRoute.options?.staticData) {\n        parentItem.children.push({\n          key: childRoute.fullPath,\n          url: childRoute.fullPath,\n          icon: childRoute.options.staticData.icon || Home,\n          title: childRoute.options.staticData.title || 'untitled',\n          children: [],\n        })\n      }\n    })\n\n    items.push(parentItem)\n  })\n\n  return items\n}\n\nexport const useDynamicSidebar = (): SidebarItem[] => {\n  const router = useRouter()\n  const allRoutes = router.flatRoutes\n\n  if (!allRoutes) {\n    return []\n  }\n\n  return buildSidebarItems(allRoutes)\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/hooks/useTranslation.ts",
      "content": "import { useTranslation as useTranslationI18n } from 'react-i18next'\n\nexport const useTranslation = () => useTranslationI18n()\n",
      "type": "registry:hook"
    }
  ]
}