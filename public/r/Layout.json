{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Layout",
  "type": "registry:block",
  "title": "Layout",
  "description": "The whole layout.",
  "dependencies": [
    "react-i18next"
  ],
  "registryDependencies": [
    "avatar",
    "button",
    "separator",
    "sidebar",
    "breadcrumb",
    "collapsible",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "registry/components/layout/Breadcrumbs.tsx",
      "content": "import React, { Suspense, useMemo } from 'react'\nimport { isMatch, Link, useMatches } from '@tanstack/react-router'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbList,\n  BreadcrumbSeparator,\n} from '@/components/ui/breadcrumb'\nimport { Skeleton } from '@/components/ui/skeleton'\n\ndeclare module '@tanstack/react-router' {\n  interface StaticDataRouteOption {\n    hasClickableBreadcrumb?: boolean\n    crumb?: React.ReactNode\n  }\n}\n\nexport const Breadcrumbs = () => {\n  const matches = useMatches()\n\n  const items = useMemo(() => {\n    const matchesWithCrumbs = matches.filter((match) => isMatch(match, 'staticData.crumb'))\n\n    return matchesWithCrumbs.map(({ pathname, staticData }, index) => ({\n      href: pathname,\n      label: staticData.crumb,\n      isClickable: staticData.hasClickableBreadcrumb ?? matchesWithCrumbs.length > index + 1,\n    })) as BreadcrumbsItem[]\n  }, [matches])\n\n  return <BreadcrumbsBase items={items} />\n}\n\ntype BreadcrumbsItem = {\n  href: string\n  label: React.ReactNode\n  isClickable: boolean\n}\ninterface BreadcrumbsBaseProps {\n  items: BreadcrumbsItem[]\n}\n\nexport const BreadcrumbsBase = ({ items }: BreadcrumbsBaseProps) => {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {items.map((item, index) => (\n          <React.Fragment key={index}>\n            <BreadcrumbItem key={index}>\n              <Suspense fallback={<Skeleton className=\"h-4 w-32\" />}>\n                {item.isClickable ? (\n                  <Link to={item.href} className=\"breadcrumb-link\">\n                    {item.label}\n                  </Link>\n                ) : (\n                  <span className=\"breadcrumb-link\">{item.label}</span>\n                )}\n              </Suspense>\n            </BreadcrumbItem>\n            {index < items.length - 1 && <BreadcrumbSeparator />}\n          </React.Fragment>\n        ))}\n      </BreadcrumbList>\n    </Breadcrumb>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/Layout.tsx",
      "content": "import { SidebarInset, SidebarProvider } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\nimport { LayoutHeader } from '@/components/layout/LayoutHeader'\nimport { LayoutSidebar } from '@/components/layout/LayoutSidebar'\nimport { LayoutSidebarFooter, LayoutSidebarFooterProps } from '@/components/layout/LayoutSidebarFooter'\nimport { LayoutSidebarHeader, LayoutSidebarHeaderProps } from '@/components/layout/LayoutSidebarHeader'\nimport { LayoutSidebarContent } from '@/components/layout/LayoutSidebarContent'\nimport { LayoutContent } from '@/components/layout/LayoutContent'\n\ninterface LayoutBaseProps { }\n\nexport function LayoutBase({ children }: PropsWithChildren<LayoutBaseProps>) {\n  return (\n    <>\n      <div className=\"[--header-height:calc(--spacing(14))]\">\n        <SidebarProvider>\n          <div className=\"flex flex-1\">{children}</div>\n        </SidebarProvider>\n      </div>\n    </>\n  )\n}\n\ninterface LayoutProps extends LayoutBaseProps {\n  sidebar?: {\n    footer?: LayoutSidebarFooterProps\n    header?: LayoutSidebarHeaderProps\n  }\n}\n\nexport function Layout({ sidebar, children }: PropsWithChildren<LayoutProps>) {\n  return (\n    <LayoutBase>\n      <LayoutSidebar>\n        <LayoutSidebarHeader {...sidebar?.header} />\n        <LayoutSidebarContent />\n        <LayoutSidebarFooter {...sidebar?.footer} />\n      </LayoutSidebar>\n      <SidebarInset>\n        <LayoutHeader />\n        <LayoutContent>{children}</LayoutContent>\n      </SidebarInset>\n    </LayoutBase>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutContent.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { useMatches } from '@tanstack/react-router'\nimport { PropsWithChildren, Suspense } from 'react'\nimport { LoadingOverlay } from '@/components/layout/LoadingOverlay'\n\ndeclare module '@tanstack/react-router' {\n  interface StaticDataRouteOption {\n    noLayoutContentPadding?: boolean\n  }\n}\n\nexport const LayoutContent = ({ children }: PropsWithChildren) => {\n  const matches = useMatches()\n  const currentMatch = matches.length > 0 ? matches[matches.length - 1] : undefined\n  const staticData = currentMatch?.staticData\n  return (\n    <div className={cn('flex flex-1 flex-col gap-4', !staticData?.noLayoutContentPadding && 'p-4')}>\n      <Suspense fallback={<LoadingOverlay />}>{children}</Suspense>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutHeader.tsx",
      "content": "import { Separator } from '@/components/ui/separator'\nimport { SidebarTrigger } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\nimport { Breadcrumbs } from '@/components/layout/Breadcrumbs'\n\nexport const LayoutHeader = ({ children }: PropsWithChildren) => {\n  return (\n    <header className=\"bg-background sticky top-0 z-50 flex w-full items-center border-b\">\n      <div className=\"flex h-(--header-height) w-full items-center gap-2 px-4\">\n        <SidebarTrigger />\n        <Separator orientation=\"vertical\" className=\"mr-2 h-4\" />\n        <Breadcrumbs />\n\n        <div className=\"ml-auto\">{children}</div>\n      </div>\n    </header>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutSidebar.tsx",
      "content": "import { Sidebar } from '@/components/ui/sidebar'\nimport { ComponentProps } from 'react'\n\nexport const LayoutSidebar = (props: ComponentProps<typeof Sidebar>) => {\n  return <Sidebar {...props} />\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutSidebarContent.tsx",
      "content": "import { Link, useLocation, useParams } from \"@tanstack/react-router\";\nimport { ChevronRight } from \"lucide-react\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from \"@/components/ui/sidebar\";\nimport { TooltipContent } from \"@/components/ui/tooltip\";\nimport { SidebarItem, useDynamicSidebar } from \"@/hooks/useDynamicSidebar\";\nimport { PropsWithChildren, useMemo } from \"react\";\n\n/** Universal sidebar content component without params plumbing. */\nexport const LayoutSidebarContent = ({ children }: PropsWithChildren) => {\n  const sidebarItems = useDynamicSidebar();\n\n  return (\n    <SidebarContent>\n      <SidebarGroup>\n        <SidebarGroupContent>\n          <SidebarMenu>\n            {sidebarItems.map((item) => (\n              <SidebarItemComponent key={item.key} item={item} />\n            ))}\n          </SidebarMenu>\n        </SidebarGroupContent>\n      </SidebarGroup>\n\n      {children && (\n        <SidebarGroup className=\"mt-auto\">\n          <SidebarGroupContent>\n            <SidebarMenu>{children}</SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      )}\n    </SidebarContent>\n  );\n};\n\n// --- utils ---\nfunction patternToRegex(pattern: string): RegExp {\n  const escaped = pattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  const withParams = escaped.replace(\n    /\\\\\\$[A-Za-z_][A-Za-z0-9_]*/g,\n    \"[^/]+\"\n  );\n  return new RegExp(`^${withParams}$`);\n}\n\nfunction matchesPattern(pattern: string, pathname: string): boolean {\n  return patternToRegex(pattern).test(pathname);\n}\n\n// --- components ---\nconst CollapsibleSidebarItem = ({ item }: { item: SidebarItem }) => {\n  const { pathname } = useLocation();\n\n  const defaultOpen = useMemo(() => {\n    if (matchesPattern(item.url, pathname)) return true;\n    return item.children.some((c) => matchesPattern(c.url, pathname));\n  }, [item.url, item.children, pathname]);\n\n  return (\n    <Collapsible\n      asChild\n      className=\"group/collapsible\"\n      defaultOpen={defaultOpen}\n    >\n      <SidebarMenuItem>\n        <CollapsibleTrigger asChild>\n          <SidebarMenuButton\n            tooltip={\n              item.title ? (\n                <TooltipContent>{item.title}</TooltipContent>\n              ) : undefined\n            }\n          >\n            {item.icon}\n            <span className=\"text-sm\">{item.title}</span>\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n          </SidebarMenuButton>\n        </CollapsibleTrigger>\n\n        <CollapsibleContent>\n          <SidebarMenuSub>\n            {item.children.map((child) => (\n              <SidebarMenuSubItem key={child.url}>\n                <Link to={child.url}>\n                  {({ isActive }) => (\n                    <SidebarMenuSubButton\n                      asChild\n                      isActive={isActive}\n                      className=\"data-[active=true]:bg-primary data-[active=true]:text-primary-foreground\"\n                    >\n                      <span className=\"font-inherit\">{child.title}</span>\n                    </SidebarMenuSubButton>\n                  )}\n                </Link>\n              </SidebarMenuSubItem>\n            ))}\n          </SidebarMenuSub>\n        </CollapsibleContent>\n      </SidebarMenuItem>\n    </Collapsible>\n  );\n};\n\nconst SidebarItemComponent = ({ item }: { item: SidebarItem }) => {\n  const params = useParams({ strict: false });\n  if (item.children.length > 0) {\n    return <CollapsibleSidebarItem item={item} />;\n  }\n\n  return (\n    <SidebarMenuItem key={item.key}>\n      <Link to={item.url} params={params}>\n        {({ isActive }) => (\n          <SidebarMenuButton\n            asChild\n            isActive={isActive}\n            className=\"data-[active=true]:bg-primary data-[active=true]:text-primary-foreground\"\n          >\n            <span>\n              {item.icon}\n              <span>{item.title}</span>\n            </span>\n          </SidebarMenuButton>\n        )}\n      </Link>\n    </SidebarMenuItem>\n  );\n};",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutSidebarFooter.tsx",
      "content": "'use client'\n\nimport { SidebarFooter, SidebarMenu, SidebarMenuItem } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\nimport { LayoutUserDropdown, LayoutUserDropdownProps } from '@/components/layout/LayoutUserDropdown'\n\nexport interface LayoutSidebarFooterProps extends LayoutUserDropdownProps {}\n\nexport const LayoutSidebarFooter = ({\n  children,\n  ...userDropdown\n}: PropsWithChildren<LayoutSidebarFooterProps>) => {\n  return (\n    <SidebarFooter>\n      <SidebarMenu>\n        <SidebarMenuItem>\n          <LayoutUserDropdown {...userDropdown}>{children}</LayoutUserDropdown>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarFooter>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutSidebarHeader.tsx",
      "content": "import {\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@/components/ui/sidebar'\nimport { Link } from '@tanstack/react-router'\nimport { Command } from 'lucide-react'\nimport { PropsWithChildren, ReactNode } from 'react'\n\nexport interface LayoutSidebarHeaderProps {\n  title?: string\n  subtitle?: string\n  icon?: ReactNode\n}\n\nexport const LayoutSidebarHeader = ({\n  children,\n  title,\n  subtitle,\n  icon,\n}: PropsWithChildren<LayoutSidebarHeaderProps>) => {\n  return (\n    <SidebarHeader>\n      <SidebarMenu>\n        {(title || subtitle) && (\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n              asChild\n            >\n              <Link to=\"/\">\n                <div className=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                  {icon ? <>{icon}</> : <Command className=\"size-4\" />}\n                </div>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  {title && <span className=\"truncate font-medium\">{title}</span>}\n                  {subtitle && <span className=\"truncate text-xs\">{subtitle}</span>}\n                </div>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        )}\n        {children}\n      </SidebarMenu>\n    </SidebarHeader>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutUserDropdown.tsx",
      "content": "'use client'\n\nimport { ChevronsUpDown, LogOut } from 'lucide-react'\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenuButton, useSidebar } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\n\nexport interface LayoutUserDropdownProps {\n  user?: {\n    name?: string\n    email?: string\n    avatar?: string\n  }\n  signOut?: () => void\n}\n\nexport const LayoutUserDropdown = ({\n  children,\n  user,\n  signOut,\n}: PropsWithChildren<LayoutUserDropdownProps>) => {\n  const { isMobile } = useSidebar()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <SidebarMenuButton\n          size=\"lg\"\n          className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n        >\n          <Avatar className=\"h-8 w-8 rounded-lg\">\n            <AvatarImage src={user?.avatar} alt={user?.name} />\n            <AvatarFallback className=\"rounded-lg\">{user?.name?.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <div className=\"grid flex-1 text-left text-sm leading-tight\">\n            <span className=\"truncate font-medium\">{user?.name}</span>\n            <span className=\"truncate text-xs\">{user?.email}</span>\n          </div>\n          <ChevronsUpDown className=\"ml-auto size-4\" />\n        </SidebarMenuButton>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n        side={isMobile ? 'bottom' : 'right'}\n        align=\"end\"\n        sideOffset={4}\n      >\n        <DropdownMenuLabel className=\"p-0 font-normal\">\n          <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n            <Avatar className=\"h-8 w-8 rounded-lg\">\n              <AvatarImage src={user?.avatar} alt={user?.name} />\n              <AvatarFallback className=\"rounded-lg\">{user?.name?.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div className=\"grid flex-1 text-left text-sm leading-tight\">\n              <span className=\"truncate font-medium\">{user?.name}</span>\n              <span className=\"truncate text-xs\">{user?.email}</span>\n            </div>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {children}\n        {children && <DropdownMenuSeparator />}\n        <DropdownMenuItem onClick={signOut} className=\"cursor-pointer\">\n          <LogOut />\n          Log out\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LayoutUserDropdown.tsx",
      "content": "'use client'\n\nimport { ChevronsUpDown, LogOut } from 'lucide-react'\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenuButton, useSidebar } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\n\nexport interface LayoutUserDropdownProps {\n  user?: {\n    name?: string\n    email?: string\n    avatar?: string\n  }\n  signOut?: () => void\n}\n\nexport const LayoutUserDropdown = ({\n  children,\n  user,\n  signOut,\n}: PropsWithChildren<LayoutUserDropdownProps>) => {\n  const { isMobile } = useSidebar()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <SidebarMenuButton\n          size=\"lg\"\n          className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n        >\n          <Avatar className=\"h-8 w-8 rounded-lg\">\n            <AvatarImage src={user?.avatar} alt={user?.name} />\n            <AvatarFallback className=\"rounded-lg\">{user?.name?.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <div className=\"grid flex-1 text-left text-sm leading-tight\">\n            <span className=\"truncate font-medium\">{user?.name}</span>\n            <span className=\"truncate text-xs\">{user?.email}</span>\n          </div>\n          <ChevronsUpDown className=\"ml-auto size-4\" />\n        </SidebarMenuButton>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n        side={isMobile ? 'bottom' : 'right'}\n        align=\"end\"\n        sideOffset={4}\n      >\n        <DropdownMenuLabel className=\"p-0 font-normal\">\n          <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n            <Avatar className=\"h-8 w-8 rounded-lg\">\n              <AvatarImage src={user?.avatar} alt={user?.name} />\n              <AvatarFallback className=\"rounded-lg\">{user?.name?.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div className=\"grid flex-1 text-left text-sm leading-tight\">\n              <span className=\"truncate font-medium\">{user?.name}</span>\n              <span className=\"truncate text-xs\">{user?.email}</span>\n            </div>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {children}\n        {children && <DropdownMenuSeparator />}\n        <DropdownMenuItem onClick={signOut} className=\"cursor-pointer\">\n          <LogOut />\n          Log out\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LoadingOverlay.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { LoadingSpinner } from './LoadingSpinner'\n\ninterface LoadingOverlayProps {\n  visible?: boolean\n  fullScreen?: boolean\n}\n\nexport const LoadingOverlay = ({ visible, fullScreen }: LoadingOverlayProps) => {\n  if (!visible && visible !== undefined) return null\n\n  return (\n    <div\n      className={cn(\n        'top-0 left-0 w-full h-full flex items-center justify-center bg-white/50 z-50 rounded-[inherit]',\n        fullScreen && 'absolute'\n      )}\n    >\n      <LoadingSpinner />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/LoadingSpinner.tsx",
      "content": "import { cn } from '@/lib/utils'\n\nexport interface ISVGProps extends React.SVGProps<SVGSVGElement> {\n  size?: number\n  className?: string\n}\n\nexport const LoadingSpinner = ({\n  size = 24,\n  className,\n  ...props\n}: ISVGProps) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      {...props}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={cn('animate-spin', className)}>\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n    </svg>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/WorkspaceContext.tsx",
      "content": "import {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  ElementType,\n  ReactNode,\n  FC,\n  useEffect,\n} from 'react'\n\nexport type Workspace = {\n  id: string\n  name: string\n  logo: ElementType\n  plan?: string\n}\n\ninterface WorkspacesContextValue {\n  workspaces: Workspace[]\n  activeWorkspace: Workspace | null\n  switchWorkspace: (workspace: Workspace) => void\n}\n\ninterface WorkspacesProviderProps {\n  children: ReactNode\n  /** Initial list of workspaces to load */\n  workspaces?: Workspace[]\n  onWorkspaceChange?: (workspace: Workspace) => void\n  selectedWorkspaceId?: string\n}\n\nconst WorkspacesContext = createContext<WorkspacesContextValue | undefined>(\n  undefined,\n)\n\nexport const WorkspacesProvider: FC<WorkspacesProviderProps> = ({\n  children,\n  onWorkspaceChange = () => {},\n  workspaces = [],\n  selectedWorkspaceId,\n}) => {\n  // Find workspace by id\n  const selectedWorkspace = workspaces.find(\n    (ws) => ws.id === selectedWorkspaceId,\n  )\n\n  const [activeWorkspace, setActiveWorkspace] = useState<Workspace | null>(\n    selectedWorkspace ?? workspaces[0] ?? null,\n  )\n\n  // Update active workspace when selectedWorkspaceId or workspaces change\n  useEffect(() => {\n    if (selectedWorkspaceId && workspaces.length > 0) {\n      const foundWorkspace = workspaces.find(\n        (ws) => ws.id === selectedWorkspaceId,\n      )\n      if (foundWorkspace && foundWorkspace.id !== activeWorkspace?.id) {\n        setActiveWorkspace(foundWorkspace)\n      }\n    } else if (workspaces.length > 0 && !activeWorkspace) {\n      // Set first workspace if no active workspace and workspaces are available\n      setActiveWorkspace(workspaces[0] ?? null)\n    }\n  }, [selectedWorkspaceId, workspaces, activeWorkspace])\n\n  const switchWorkspace = useCallback(\n    (workspace: Workspace) => {\n      setActiveWorkspace(workspace)\n      onWorkspaceChange(workspace)\n    },\n    [onWorkspaceChange],\n  )\n\n  return (\n    <WorkspacesContext.Provider\n      value={{ workspaces, activeWorkspace, switchWorkspace }}>\n      {children}\n    </WorkspacesContext.Provider>\n  )\n}\n\nexport const useWorkspaces = (): WorkspacesContextValue => {\n  const context = useContext(WorkspacesContext)\n  if (!context) {\n    throw new Error('useWorkspaces must be used inside a WorkspacesProvider')\n  }\n  return context\n}\n\nexport const useCurrentWorkspace = (): Workspace => {\n  const { activeWorkspace } = useWorkspaces()\n  if (!activeWorkspace) {\n    throw new Error('No active workspace found')\n  }\n  return activeWorkspace\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/layout/WorkspaceSwitch.tsx",
      "content": "import React from 'react'\nimport { ChevronsUpDown, Plus } from 'lucide-react'\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar'\nimport { useWorkspaces, Workspace } from '@/components/layout/WorkspaceContext'\nimport { useTranslation } from 'react-i18next'\n\ninterface WorkspaceSwitchProps {\n  onAddWorkspace?: () => void\n}\n\nexport const WorkspaceSwitch: React.FC<WorkspaceSwitchProps> = ({ onAddWorkspace }) => {\n  const { workspaces, activeWorkspace, switchWorkspace } = useWorkspaces()\n  const { t } = useTranslation()\n\n  if (!activeWorkspace) return null\n\n  const handleWorkspaceSwitch = (workspace: Workspace) => {\n    // Only switch if it's different from current active workspace\n    if (workspace.id !== activeWorkspace.id) {\n      switchWorkspace(workspace)\n    }\n  }\n\n  const handleAddWorkspace = () => {\n    if (onAddWorkspace) {\n      onAddWorkspace()\n    } else {\n      // Default behavior - you might want to navigate to a create workspace page\n      console.log('Add workspace clicked - no handler provided')\n    }\n  }\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <activeWorkspace.logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{activeWorkspace.name}</span>\n                <span className=\"truncate text-xs\">{activeWorkspace.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-[var(--radix-dropdown-menu-trigger-width)] min-w-56 rounded-lg\"\n            align=\"start\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-muted-foreground text-xs\">\n              {t('workspaceSwitch.label')}\n            </DropdownMenuLabel>\n            {workspaces.map((ws: Workspace) => (\n              <DropdownMenuItem\n                key={ws.id} // Use id instead of name for better uniqueness\n                onClick={() => handleWorkspaceSwitch(ws)}\n                className={`gap-2 p-2 ${\n                  ws.id === activeWorkspace.id ? 'bg-accent text-accent-foreground' : ''\n                }`}\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-md border\">\n                  <ws.logo className=\"size-3.5 shrink-0\" />\n                </div>\n                {ws.name}\n                {ws.id === activeWorkspace.id && (\n                  <span className=\"ml-auto text-xs text-muted-foreground\">\n                    {t('workspaceSwitch.current', { defaultValue: 'Current' })}\n                  </span>\n                )}\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\" onClick={handleAddWorkspace}>\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-transparent\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"text-muted-foreground font-medium\">\n                {t('workspaceSwitch.addWorkspace')}\n              </div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/hooks/useDynamicSidebar.ts",
      "content": "import { type AnyRoute, useRouter } from '@tanstack/react-router'\nimport { ReactNode } from 'react'\n\ndeclare module '@tanstack/react-router' {\n  interface StaticDataRouteOption {\n    title?: string\n    icon?: ReactNode\n    showInSidebar?: boolean\n    sidebarOrder?: number\n  }\n}\n\nexport type SidebarItem = {\n  key: string\n  url: string\n  icon?: ReactNode\n  title: ReactNode\n  children: SidebarItem[]\n}\n\nconst buildSidebarItems = (allFlatRoutes: AnyRoute[]): SidebarItem[] => {\n  const sidebarRoutes = allFlatRoutes.filter((route) => {\n    return route.options?.staticData?.showInSidebar\n  })\n\n  return getSidebarItemsForParent(sidebarRoutes)\n}\n\nconst getSidebarItemsForParent = (flatRoutes: AnyRoute[], parentFullPath = '/'): SidebarItem[] => {\n  const fullPaths = flatRoutes\n    .map((r) => r.fullPath)\n    .filter((p): p is string => typeof p === 'string')\n  const validFullPaths = fullPaths.filter((p) => {\n    return p.startsWith(parentFullPath) && p !== parentFullPath\n  })\n  if (validFullPaths.length === 0) {\n    return []\n  }\n  const validClosestPaths = validFullPaths.filter((p) => {\n    return !validFullPaths.some((other) => {\n      return other !== p && p.startsWith(other)\n    })\n  })\n  const closestRoutes = validClosestPaths\n    .map((r) => {\n      return flatRoutes.find((route) => route.fullPath === r)\n    })\n    .filter(Boolean) as AnyRoute[]\n\n  const sortedRoutes = closestRoutes.sort((a, b) => {\n    const orderA = a.options?.staticData?.sidebarOrder ?? Number.MAX_SAFE_INTEGER\n    const orderB = b.options?.staticData?.sidebarOrder ?? Number.MAX_SAFE_INTEGER\n    return orderA - orderB\n  })\n\n  return [\n    ...sortedRoutes.map((r) => {\n      return {\n        key: r.fullPath,\n        url: r.fullPath,\n        icon: r.options?.staticData?.icon,\n        title: r.options?.staticData?.title || 'untitled',\n        children: getSidebarItemsForParent(flatRoutes, r.fullPath),\n      }\n    }),\n  ]\n}\n\nexport const useDynamicSidebar = (): SidebarItem[] => {\n  const router = useRouter()\n  const allRoutes = router?.flatRoutes\n\n  if (!allRoutes) {\n    return []\n  }\n\n  return buildSidebarItems(allRoutes)\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/hooks/useTranslation.ts",
      "content": "import { useTranslation as useTranslationI18n } from 'react-i18next'\n\nexport const useTranslation = () => useTranslationI18n()\n",
      "type": "registry:hook"
    }
  ]
}