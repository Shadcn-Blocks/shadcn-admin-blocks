{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Layout",
  "type": "registry:block",
  "title": "Layout",
  "description": "The whole layout.",
  "dependencies": [
    "react-i18next"
  ],
  "registryDependencies": [
    "avatar",
    "button",
    "separator",
    "sidebar",
    "breadcrumb",
    "collapsible",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "registry/layout/Layout.tsx",
      "content": "import { SidebarInset, SidebarProvider } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\nimport { LayoutHeader } from './LayoutHeader'\nimport { LayoutSidebar } from './LayoutSidebar'\nimport { LayoutSidebarFooter, LayoutSidebarFooterProps } from './LayoutSidebarFooter'\nimport { LayoutSidebarHeader, LayoutSidebarHeaderProps } from './LayoutSidebarHeader'\nimport { LayoutSidebarContent } from './LayoutSidebarContent'\nimport { LayoutContent } from './LayoutContent'\n\ninterface LayoutBaseProps {}\n\nexport function LayoutBase({ children }: PropsWithChildren<LayoutBaseProps>) {\n  return (\n    <>\n      <div className=\"[--header-height:calc(--spacing(14))]\">\n        <SidebarProvider>\n          <div className=\"flex flex-1\">{children}</div>\n        </SidebarProvider>\n      </div>\n    </>\n  )\n}\n\ninterface LayoutProps extends LayoutBaseProps {\n  sidebar?: { footer?: LayoutSidebarFooterProps; header?: LayoutSidebarHeaderProps }\n}\n\nexport function Layout({ sidebar, children }: PropsWithChildren<LayoutProps>) {\n  return (\n    <LayoutBase>\n      <LayoutSidebar>\n        <LayoutSidebarHeader {...sidebar?.header} />\n        <LayoutSidebarContent />\n        <LayoutSidebarFooter {...sidebar?.footer} />\n      </LayoutSidebar>\n      <SidebarInset>\n        <LayoutHeader />\n        <LayoutContent>{children}</LayoutContent>\n      </SidebarInset>\n    </LayoutBase>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutContent.tsx",
      "content": "import { PropsWithChildren } from 'react'\n\nexport const LayoutContent = ({ children }: PropsWithChildren) => {\n  return <div className=\"flex flex-1 flex-col gap-4 p-4\">{children}</div>\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutHeader.tsx",
      "content": "import { Separator } from '@/components/ui/separator'\nimport { SidebarTrigger } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\nimport { Breadcrumbs } from './Breadcrumbs'\n\nexport const LayoutHeader = ({ children }: PropsWithChildren) => {\n  return (\n    <header className=\"bg-background sticky top-0 z-50 flex w-full items-center border-b\">\n      <div className=\"flex h-(--header-height) w-full items-center gap-2 px-4\">\n        <SidebarTrigger />\n        <Separator orientation=\"vertical\" className=\"mr-2 h-4\" />\n        <Breadcrumbs />\n\n        <div className=\"ml-auto\">{children}</div>\n      </div>\n    </header>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutSidebar.tsx",
      "content": "import { Sidebar } from '@/components/ui/sidebar'\nimport { ComponentProps } from 'react'\n\nexport const LayoutSidebar = (props: ComponentProps<typeof Sidebar>) => {\n  return <Sidebar {...props} />\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutSidebarContent.tsx",
      "content": "import { Link, useMatches } from '@tanstack/react-router'\nimport { ChevronRight } from 'lucide-react'\n\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\nimport {\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from '@/components/ui/sidebar'\nimport { SidebarItem, useDynamicSidebar } from '@/hooks/useDynamicSidebar'\nimport { PropsWithChildren, useMemo } from 'react'\nimport { TooltipContent } from '@/components/ui/tooltip'\n\nexport const LayoutSidebarContent = ({ children }: PropsWithChildren) => {\n  const sidebarItems = useDynamicSidebar()\n\n  return (\n    <SidebarContent>\n      <SidebarGroup>\n        <SidebarGroupContent>\n          <SidebarMenu>\n            {sidebarItems.map((item) => (\n              <SidebarItemComponent key={item.key} item={item} />\n            ))}\n          </SidebarMenu>\n        </SidebarGroupContent>\n      </SidebarGroup>\n      {children && (\n        <SidebarGroup className=\"mt-auto\">\n          <SidebarGroupContent>\n            <SidebarMenu>{children}</SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      )}\n    </SidebarContent>\n  )\n}\n\nconst CollapsibleSidebarItem = ({ item }: { item: SidebarItem }) => {\n  const matches = useMatches()\n\n  const defaultOpen = useMemo(() => {\n    return matches.some((match) => match.pathname === item.url)\n  }, [matches, item.url])\n\n  return (\n    <Collapsible asChild className=\"group/collapsible\" defaultOpen={defaultOpen}>\n      <SidebarMenuItem>\n        <CollapsibleTrigger asChild>\n          <SidebarMenuButton\n            tooltip={item.title ? <TooltipContent>{item.title}</TooltipContent> : undefined}\n          >\n            {item.icon}\n            <span className=\"text-sm\">{item.title}</span>\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n          </SidebarMenuButton>\n        </CollapsibleTrigger>\n        <CollapsibleContent>\n          <SidebarMenuSub>\n            {item.children.map((child) => (\n              <Link to={child.url} key={child.url}>\n                {({ isActive }) => (\n                  <SidebarMenuSubItem>\n                    <SidebarMenuSubButton asChild isActive={isActive}>\n                      <span className=\"font-inherit\">{child.title}</span>\n                    </SidebarMenuSubButton>\n                  </SidebarMenuSubItem>\n                )}\n              </Link>\n            ))}\n          </SidebarMenuSub>\n        </CollapsibleContent>\n      </SidebarMenuItem>\n    </Collapsible>\n  )\n}\n\nconst SidebarItemComponent = ({ item }: { item: SidebarItem }) => {\n  if (item.children.length > 0) {\n    return <CollapsibleSidebarItem item={item} />\n  }\n\n  return (\n    <Link to={item.url} key={item.url}>\n      {({ isActive }) => (\n        <SidebarMenuItem key={item.key}>\n          <SidebarMenuButton asChild isActive={isActive}>\n            <span>\n              {item.icon}\n              <span>{item.title}</span>\n            </span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      )}\n    </Link>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutSidebarFooter.tsx",
      "content": "'use client'\n\nimport { SidebarFooter, SidebarMenu, SidebarMenuItem } from '@/components/ui/sidebar'\nimport { PropsWithChildren, use } from 'react'\nimport { LayoutUserDropdown, LayoutUserDropdownProps } from './LayoutUserDropdown'\n\nexport interface LayoutSidebarFooterProps extends LayoutUserDropdownProps {}\n\nexport const LayoutSidebarFooter = ({\n  children,\n  ...userDropdown\n}: PropsWithChildren<LayoutSidebarFooterProps>) => {\n  return (\n    <SidebarFooter>\n      <SidebarMenu>\n        <SidebarMenuItem>\n          <LayoutUserDropdown {...userDropdown}>{children}</LayoutUserDropdown>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarFooter>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutSidebarHeader.tsx",
      "content": "import {\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@/components/ui/sidebar'\nimport { Link } from '@tanstack/react-router'\nimport { Command } from 'lucide-react'\nimport { PropsWithChildren, ReactNode } from 'react'\n\nexport interface LayoutSidebarHeaderProps {\n  title?: string\n  subtitle?: string\n  icon?: ReactNode\n}\n\nexport const LayoutSidebarHeader = ({\n  children,\n  title,\n  subtitle,\n  icon,\n}: PropsWithChildren<LayoutSidebarHeaderProps>) => {\n  return (\n    <SidebarHeader>\n      <SidebarMenu>\n        {title && subtitle && icon && (\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n              asChild\n            >\n              <Link to=\"/\">\n                <div className=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                  {icon ? <>{icon}</> : <Command className=\"size-4\" />}\n                </div>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-medium\">{title}</span>\n                  <span className=\"truncate text-xs\">{subtitle}</span>\n                </div>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        )}\n        {children}\n      </SidebarMenu>\n    </SidebarHeader>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/layout/LayoutUserDropdown.tsx",
      "content": "'use client'\n\nimport { ChevronsUpDown, LogOut } from 'lucide-react'\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenuButton, useSidebar } from '@/components/ui/sidebar'\nimport { PropsWithChildren } from 'react'\n\nexport interface LayoutUserDropdownProps {\n  user?: {\n    name?: string\n    email?: string\n    avatar?: string\n  }\n  signOut?: () => void\n}\n\nexport const LayoutUserDropdown = ({\n  children,\n  user,\n  signOut,\n}: PropsWithChildren<LayoutUserDropdownProps>) => {\n  const { isMobile } = useSidebar()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <SidebarMenuButton\n          size=\"lg\"\n          className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n        >\n          <Avatar className=\"h-8 w-8 rounded-lg\">\n            <AvatarImage src={user?.avatar} alt={user?.name} />\n            <AvatarFallback className=\"rounded-lg\">CN</AvatarFallback>\n          </Avatar>\n          <div className=\"grid flex-1 text-left text-sm leading-tight\">\n            <span className=\"truncate font-medium\">{user?.name}</span>\n            <span className=\"truncate text-xs\">{user?.email}</span>\n          </div>\n          <ChevronsUpDown className=\"ml-auto size-4\" />\n        </SidebarMenuButton>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n        side={isMobile ? 'bottom' : 'right'}\n        align=\"end\"\n        sideOffset={4}\n      >\n        <DropdownMenuLabel className=\"p-0 font-normal\">\n          <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n            <Avatar className=\"h-8 w-8 rounded-lg\">\n              <AvatarImage src={user?.avatar} alt={user?.name} />\n              <AvatarFallback className=\"rounded-lg\">{user?.name?.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div className=\"grid flex-1 text-left text-sm leading-tight\">\n              <span className=\"truncate font-medium\">{user?.name}</span>\n              <span className=\"truncate text-xs\">{user?.email}</span>\n            </div>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {children}\n        {children && <DropdownMenuSeparator />}\n        <DropdownMenuItem onClick={signOut} className=\"cursor-pointer\">\n          <LogOut />\n          Log out\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/WorkspaceContext.tsx",
      "content": "import { createContext, useContext, useState, useCallback, ElementType, ReactNode, FC } from 'react'\n\nexport type Workspace = {\n  name: string\n  logo: ElementType\n  plan: string\n}\n\ninterface WorkspacesContextValue {\n  workspaces: Workspace[]\n  activeWorkspace: Workspace | null\n  switchWorkspace: (workspace: Workspace) => void\n}\n\ninterface WorkspacesProviderProps {\n  children: ReactNode\n  /** Initial list of workspaces to load */\n  workspaces?: Workspace[]\n}\n\nconst WorkspacesContext = createContext<WorkspacesContextValue | undefined>(undefined)\n\nexport const WorkspacesProvider: FC<WorkspacesProviderProps> = ({\n  children,\n  workspaces = [],\n}) => {\n  const [activeWorkspace, setActiveWorkspace] = useState<Workspace | null>(workspaces[0] ?? null)\n\n  const switchWorkspace = useCallback((workspace: Workspace) => {\n    setActiveWorkspace(workspace)\n  }, [])\n\n  return (\n    <WorkspacesContext.Provider value={{ workspaces, activeWorkspace, switchWorkspace }}>\n      {children}\n    </WorkspacesContext.Provider>\n  )\n}\n\nexport const useWorkspaces = (): WorkspacesContextValue => {\n  const context = useContext(WorkspacesContext)\n  if (!context) {\n    throw new Error('useWorkspaces must be inside a WorkspacesProvider')\n  }\n  return context\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/components/WorkspaceSwitch.tsx",
      "content": "import React from 'react'\nimport { ChevronsUpDown, Plus } from 'lucide-react'\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuShortcut,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar'\nimport { useWorkspaces, Workspace } from '@/components/WorkspaceContext'\nimport { useTranslation } from 'react-i18next'\n\nexport const WorkspaceSwitch: React.FC = () => {\n  const { workspaces, activeWorkspace, switchWorkspace } = useWorkspaces()\n  const { t } = useTranslation()\n\n  if (!activeWorkspace) return null\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <activeWorkspace.logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{activeWorkspace.name}</span>\n                <span className=\"truncate text-xs\">{activeWorkspace.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n\n          <DropdownMenuContent\n            className=\"w-[var(--radix-dropdown-menu-trigger-width)] min-w-56 rounded-lg\"\n            align=\"start\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-muted-foreground text-xs\">\n              {t('workspaceSwitch.label')}\n            </DropdownMenuLabel>\n            {workspaces.map((ws: Workspace, i: number) => (\n              <DropdownMenuItem\n                key={ws.name}\n                onClick={() => switchWorkspace(ws)}\n                className=\"gap-2 p-2\"\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-md border\">\n                  <ws.logo className=\"size-3.5 shrink-0\" />\n                </div>\n                {ws.name}\n                <DropdownMenuShortcut>⌘{i + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-transparent\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"text-muted-foreground font-medium\">\n                {t('workspaceSwitch.addWorkspace')}\n              </div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/hooks/useDynamicSidebar.ts",
      "content": "import { type AnyRoute, useRouter } from '@tanstack/react-router'\nimport { Home } from 'lucide-react'\nimport { ReactNode } from 'react'\n\nexport type SidebarItem = {\n  key: string\n  url: string\n  icon: ReactNode\n  title: ReactNode\n  children: SidebarItem[]\n}\n\nconst buildSidebarItems = (allFlatRoutes: AnyRoute[]): SidebarItem[] => {\n  const items: SidebarItem[] = []\n\n  const parents = allFlatRoutes.filter((route) => {\n    if (!route.fullPath) return false\n\n    // remove initial \"/\" and trailing \"/\" if present\n    const cleanPath = route.fullPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n\n    const segments = cleanPath.split('/')\n    return segments.length === 1 && segments[0] !== ''\n  })\n\n  // root route\n  const rootRoute = allFlatRoutes.find(\n    (route) => route.fullPath === '/' && route.options?.staticData?.showInSidebar\n  )\n  if (rootRoute && rootRoute.options?.staticData) {\n    items.push({\n      key: 'root',\n      url: '/',\n      icon: rootRoute.options.staticData.icon || Home,\n      title: rootRoute.options.staticData.title || 'Home',\n      children: [],\n    })\n  }\n\n  parents.forEach((parentRoute) => {\n    if (!parentRoute.options?.staticData?.showInSidebar) return\n\n    const parentPath = parentRoute.fullPath\n    const parentStaticData = parentRoute.options.staticData\n\n    const parentItem: SidebarItem = {\n      key: parentPath,\n      url: parentPath,\n      icon: parentStaticData.icon || Home,\n      title: parentStaticData.title || 'untitled',\n      children: [],\n    }\n\n    const childRoutes = allFlatRoutes.filter((route) => {\n      if (!route.fullPath || !route.options?.staticData?.showInSidebar) return false\n      if (route.fullPath === parentPath) return false // skip the parent itself\n      if (route.fullPath.includes('$')) return false // skip dynamic routes\n\n      // check if this route is a child of the current parent\n      const cleanPath = route.fullPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n      const segments = cleanPath.split('/')\n\n      // child routes should have more than 1 segment and start with the parent segment\n      return (\n        segments.length > 1 && segments[0] === parentPath.replace(/^\\/+/, '').replace(/\\/+$/, '')\n      )\n    })\n\n    childRoutes.forEach((childRoute) => {\n      if (childRoute.options?.staticData) {\n        parentItem.children.push({\n          key: childRoute.fullPath,\n          url: childRoute.fullPath,\n          icon: childRoute.options.staticData.icon || Home,\n          title: childRoute.options.staticData.title || 'untitled',\n          children: [],\n        })\n      }\n    })\n\n    items.push(parentItem)\n  })\n\n  return items\n}\n\nexport const useDynamicSidebar = (): SidebarItem[] => {\n  const router = useRouter()\n  const allRoutes = router?.flatRoutes\n\n  if (!allRoutes) {\n    return []\n  }\n\n  return buildSidebarItems(allRoutes)\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/hooks/useTranslation.ts",
      "content": "import { useTranslation as useTranslationI18n } from 'react-i18next'\n\nexport const useTranslation = () => useTranslationI18n()\n",
      "type": "registry:hook"
    }
  ]
}